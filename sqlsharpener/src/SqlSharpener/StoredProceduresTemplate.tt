<#@ template debug="false" hostspecific="false" language="C#"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ parameter name="outputNamespace" type="System.String" #>
<#@ parameter name="procedurePrefix" type="System.String" #>
<#@ parameter name="sqlPaths" type="System.Collections.Generic.List<string>" #>
<#
  // This creates a pre-compiled template that can be called from
  // within a project to generate C# wrappers for stored procedures.

  var helper = new ProcedureHelper();
  var meta = new MetaBuilder(sqlPaths.ToArray());
  meta.ProcedurePrefix = procedurePrefix ?? "";

/////////////////Begin Template//////////////////
 #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlSharpener.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace <#=helper.GetNamespace(outputNamespace)#>
{
	using System;
	using System.IO;
	using System.Linq;
	using System.Data;
	using System.Data.SqlClient;
	using System.Configuration;
	using System.Collections.Generic;
	using Microsoft.SqlServer.Server;

	/// <summary>
	/// Interface of the wrapper class for calling stored procedures. 
	/// </summary>
	public partial interface IStoredProcedures
	{
<#foreach(var proc in meta.Procedures){ #>
		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		<#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=proc.Name#>InputDto input );
		
		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure using POCO objects
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		TPocoOutputDto <#=proc.Name#><TPocoOutputDto>( IProcedureInputDto input )
			where TPocoOutputDto : IProcedureOutputDto<<#=helper.GetReturnType(proc)#>>, new();

<# if(proc.Parameters.Any(x => x.IsTableValue)) { #>
		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure using generated objects for table-valued parameters.
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		<#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=helper.GetMethodParamList(proc, false, true, false)#> );
<# } #>

		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		<#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=helper.GetMethodParamList(proc, true, true, false)#> );

<# } #>
	}

	/// <summary>
	/// Interface that a POCO can implement to be able to pass it in as the input DTO of a stored procedure
	/// if you prefer not to use the generated input dto. 
	/// </summary>
	public partial interface IProcedureInputDto
	{
		/// <summary>
		/// Converts the property values of the POCO into an array of objects.
		/// The order of values in the array should match the parameters of the 
		/// stored procedure (excluding any output parameters).
		/// </summary>
		object[] ToObjectArray();

		/// <summary>
		/// Sets property values of the POCO with values from any output parameters
		/// of the stored procedure. Value will be passed in the same order as the 
		/// output parameters appear in the stored procedure.
		/// </summary>
		void SetFromOutputParameters(object[] outputValues);
	}

	/// <summary>
	/// Interface that a POCO can implement to be used as the output DTO of a stored procedure
	/// if you prefer not to use the generated output dto. 
	/// </summary>
	public partial interface IProcedureOutputDto<TGeneratedOutput>
	{
		/// <summary>
		/// Sets property values of the POCO with values from any output parameters
		/// of the stored procedure. Value will be passed in the same order as the 
		/// output parameters appear in the stored procedure.
		/// </summary>
		void SetFromResult(TGeneratedOutput result);
	}

	/// <summary>
	/// Interface that a POCO can implement to be able to pass it into a table-valued parameter
	/// if you prefer not to use the generated parameter dto. 
	/// </summary>
	public partial interface ITableValuedParamRow
	{
		SqlDataRecord ToSqlDataRecord();
	}

	/// <summary>
	/// Wrapper class for calling stored procedures. 
	/// </summary>
	public partial class StoredProcedures : IStoredProcedures
	{
		private string connectionString;

		public StoredProcedures(string connectionString)
		{
			this.connectionString = connectionString;
		}


<#foreach(var proc in meta.Procedures){ #>
		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure using a generated input DTO
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		public virtual <#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=proc.Name#>InputDto input )
		{
<# foreach(var outputParam in proc.Parameters.Where(x => x.IsOutput)){ #>
			<#=outputParam.DataTypes[TypeFormat.DotNetFrameworkType]#> <#=outputParam.Name#>Output;
<# } #>
			var result = this.<#=proc.Name#>(<#=helper.GetMethodParamListForInputDto(proc)#>);
<# foreach(var outputParam in proc.Parameters.Where(x => x.IsOutput)){ #>
			input.<#=outputParam.Name#> = <#=outputParam.Name#>Output;
<# } #>
			return result;
		}


		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure using POCO objects
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		public virtual TPocoOutputDto <#=proc.Name#><TPocoOutputDto>( IProcedureInputDto input ) 
			where TPocoOutputDto : IProcedureOutputDto<<#=helper.GetReturnType(proc)#>>, new()
		{
			var parameters = input.ToObjectArray();
<# foreach(var outputParam in proc.Parameters.Where(x => x.IsOutput)){ #>
			<#=outputParam.DataTypes[TypeFormat.DotNetFrameworkType]#> <#=outputParam.Name#>Output;
<# } #>
			var result = this.<#=proc.Name#>(<#=helper.GetMethodParamListForObjectArray(proc)#>);
			var outputValues = new List<object>();
<# foreach(var outputParam in proc.Parameters.Where(x => x.IsOutput)){ #>
			outputValues.Add(<#=outputParam.Name#>Output);
<# } #>
			input.SetFromOutputParameters(outputValues.ToArray());
			var outputPoco = new TPocoOutputDto();
            outputPoco.SetFromResult(result);
			return outputPoco;
		}

<# if(proc.Parameters.Any(x => x.IsTableValue)) { #>
		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure using generated objects for table-valued parameters.
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		public virtual <#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=helper.GetMethodParamList(proc, false, true, false)#> )
		{
			return this.<#=proc.Name#>( <#=helper.GetMethodParamList(proc, true, true, true)#> );
		}
<# } #>

		/// <summary>
		/// Calls the "<#=proc.RawName#>" stored procedure
		/// </summary>
		/// <returns><#=helper.GetReturnXmlComment(proc)#></returns>
		public virtual <#=helper.GetReturnType(proc)#> <#=proc.Name#>( <#=helper.GetMethodParamList(proc, true, true, false)#> )
		{
			On<#=proc.Name#>Begin();
			<#=helper.GetReturnVariable(proc)#>
			using(var conn = new SqlConnection(connectionString))
			{
				conn.Open();
				using (var cmd = conn.CreateCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "<#=proc.RawName#>";
<#=helper.GetSqlParamList(proc, 5)#>
<#=helper.GetExecuteStatement(proc, 5)#>
				}
				conn.Close();
			}
			On<#=proc.Name#>End(result);
			return result;
		}

		partial void On<#=proc.Name#>Begin();
		partial void On<#=proc.Name#>End(<#=helper.GetReturnType(proc)#> result);

<# } #>

		/// <summary>
		/// Helper function to get the bytes out of varbinary columns
		/// </summary>
		private byte[] GetBytes(IDataReader reader, int ordinal)
		{
			MemoryStream ms = new MemoryStream();
			BinaryWriter writer = new BinaryWriter(ms);
			byte[] buffer = new byte[1024];
			long blobSize = reader.GetBytes(ordinal, 0, null, 0, 0);
			long currPos = 0;
			while (currPos < blobSize) {
				currPos += reader.GetBytes(ordinal, currPos, buffer, 0, 1024);
				writer.Write(buffer);
				writer.Flush();
			}
			writer.Close();
			return ms.ToArray();
		}
	}

	/// <summary>
	/// The return value of the stored procedure functions.
	/// </summary>
	public partial class Result<T>
	{
		public T Data { get; set; }
		public int RecordsAffected { get; set; }
	}

<#foreach(var proc in meta.Procedures){ #>
<#=helper.GetDtoObject(proc, 1)#>
<# } #>
}
